(trigger
    (key [[shift][cmd]O]))

(name [Organize Imports])

(only-in source.java)

(input selection)

(output replace-selected)

(save file)

(script [#!/usr/bin/env ruby -w
#
# WARNING: This script modifies the source of your file!!!  No one but
# yourself is responsible for it losing code.
#
# Provides an Eclipse like Organize Imports except it can't
# add imports.  It cleans up the list by filtering out unused
# imports and alphabetizing the used.
#
# * alphabetizes imports placing java.* and javax.* before others.
# * removes unused imports.
# * maintains any "package.*;" imports and static imports
# * supports class names starting with lowercase characters (legacy code)
#

require 'pp'

before, imports, after, all = [], [], [], []

STDIN.each do |line|
  all << line
  
  if line =~ /\s*^import /
    imports << line.strip
  elsif imports.empty? && (before.empty? || !before.last.strip.empty?)
    before << line
  elsif !imports.empty? && after.empty?
    # remove empty lines after the imports and before anything else
    after << line unless line.strip.empty?
  elsif
    after << line
  end
end

if imports.empty?
  # if there are no imports just output the original lines and exit
  all.each { |line| puts line }
  exit 0
end

classes = {}
imports.each do |import|
  import.scan(/\s*import\s+([A-Za-z0-9.]+)\.([a-zA-Z0-9]+);/) do |package, name|
    classes[name] = { :package => package }
  end
end

after.each do |line|
  next if line =~ %r{^\s*(//|/\*|\*)} #comments
  
  # Attempt to find all classes in the file.  This is loose in that it
  # accepts words with lowercase letters and identifies them as classes.  This is OK
  # since it won't add imports, it's only used to determine if an existing import
  # is valid.
  line.scan(/\b([A-Za-z]\w*)(\b|\.)/) do |name, boundary|
    classes[name][:used] = 1 if classes[name]
  end
end

# Based upon the classes found in the file determine the used imports
java_imports, other_imports = [], []
classes.each_pair do |name, info|
  if info[:used]
    array = (info[:package] =~ /^java[x]?\./) ? java_imports : other_imports
    array << "import #{info[:package]}.#{name};"
  end
end

# Include any .* imports and static imports since they can't be validated
imports.each do |import|
  if import =~ /\.\*\s*;/ || import =~ /^import static /
    array = (import =~ / java[x]?\./) ? java_imports : other_imports
    array << import
  end
end

# create section comprised of the import lines attempting to remove duplicate empty lines
last_was_empty, import_lines = before.last.strip.empty?, []
[[""], java_imports.sort, [""], other_imports.sort, [""]].flatten.each do |line|
  # prevent multiple empty lines
  next if last_was_empty && line.strip.empty? 

  last_was_empty = line.strip.empty? 
  import_lines << line
end

[before, import_lines, after].flatten.each do |line|
  puts line
end
])