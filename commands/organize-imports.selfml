(trigger
    (key [[shift][cmd]O]))

(name [Organize Imports])

(only-in source.java)

(input selection)

(output replace-selected)

(save file)

(script [#!/usr/bin/env ruby -w
#
# WARNING: This script modifies the source of your file!!!  No one but
# yourself is responsible for it losing code.
#
# Provides an Eclipse like Organize Imports except it can't
# add imports.  It cleans up the list by filtering out unused
# imports and alphabetizing the used.
#
# * alphabetizes imports placing java.* and javax.* before others.
# * removes unused imports.
# * maintains any "package.*;" imports and static imports
# * supports class names starting with lowercase characters (legacy code)
#
# TODO add proper support for /* */ comments.  Since these can be part of the line we can't ignore these lines

require 'pp'

before, imports, after, all = [], [], [], []

class_defined = false

STDIN.each do |line|
  all << line
  
  if line =~ / (class|interface) / && !(line =~ %r{^\s*(//|\*)})
    class_defined = true
    
    after << line
  elsif line =~ /\s*^import /
    imports << line.strip
  elsif imports.empty? && !class_defined
    before << line
  elsif !imports.empty? && after.empty?
    # remove empty lines after the imports and before anything else
    after << line unless line.strip.empty?
  elsif
    after << line
  end
end

if imports.empty?
  # if there are no imports just output the original lines and exit
  all.each { |line| puts line }
  exit 0
end

classes = {}
imports.each do |import|
  import.scan(/\s*import\s+([A-Za-z0-9.]+)\.([a-zA-Z0-9]+);/) do |package, name|
    classes[name] = { :package => package }
  end
end

after.each do |line|
  next if line =~ %r{^\s*(//|/\*|\*)} #comments
  
  # Attempt to find all classes in the file.  This is loose in that it
  # accepts words with lowercase letters and identifies them as classes.  This is OK
  # since it won't add imports, it's only used to determine if an existing import
  # is valid.
  line.scan(/\b([A-Za-z]\w*)(\b|\.)/) do |name, boundary|
    classes[name][:used] = 1 if classes[name]
  end
end

# Based upon the classes found in the file determine the used imports
other_imports, static_imports, array = [], [], nil
classes.each_pair do |name, class_info|
  if class_info[:used]
    other_imports << "import #{class_info[:package]}.#{name};"
  end
end

# Include any .* imports and static imports since they can't be validated
imports.each do |import|
  if import =~ /^import static/
    static_imports << import
  elsif import =~ /\.\*\s*;/
    array = (import =~ / java[x]?\./) ? java_imports : other_imports
    array << import
  end
end

# create section comprised of the import lines attempting to remove duplicate empty lines
last_line_was_empty, import_lines = before.last.strip.empty?, []

unless static_imports.empty?
  import_lines << '' unless last_line_was_empty
  import_lines.push(*static_imports)
  last_line_was_empty = false
end

# Sort according to the default eclipse sort.
sort_order = [
  [/^import /, 4], # everything else
  [/^import com\./, 3],
  [/^import org\./, 2],
  [/^import javax\./, 1], 
  [/^import java\./, 0],
]

sorted = other_imports.sort do |a, b|
  a_group, b_group = sort_order[0][1], sort_order[0][1]
  
  sort_order.each do |x|
    a_group = x[1] if (a.match(x[0]))
    b_group = x[1] if (b.match(x[0]))
  end
  
  if a_group != b_group
    # sort by group
    result = a_group <=> b_group
  else
    # in the same group, sort by text
    result = a <=> b
  end
  
  result
end

cur_regex = nil

[[""], sorted, [""]].flatten.each do |line|
  next if last_line_was_empty && line.strip.empty? # prevent multiple empty lines
  
  old_regex = cur_regex
  sort_order.each do |x|
    cur_regex = x[0] if (line.match(x[0]))
  end
  import_lines << '' if old_regex && cur_regex && old_regex != cur_regex
  
  last_line_was_empty = line.strip.empty? 
  import_lines << line
end

[before, import_lines, after].flatten.each do |line|
  puts line
end
])